/*********************************************************************************************
*
*					Contiki操作系统移植STM32F103基于Keil编程软件
*																		20181002 LJH
**********************************************************************************************/
一、资料准备：
官网：http://www.contiki-os.org/
源码下载：https://github.com/contiki-os/contiki/releases
学习资料：http://blog.chinaunix.net/uid-9112803-id-2978041.html
关于protothread：https://blog.csdn.net/finewind/article/details/6186291
移植相关：stm32基于IAR：https://blog.csdn.net/xukai871105/article/details/7482858/
			stm32基于keil：https://blog.csdn.net/josephgodvim/article/details/73499499
			
二、移植总结：
	1.移植环境：
		1.1 Contiki源码包：contiki-2.7
		1.2 IDE：keil uv5
		1.3 库：stm32cubeMX
		1.4 正点原子mini开发板
		
	2.资料提取：
		Contiki系统相关：contiki-2.7\contiki-2.7\core\sys：				全部文件
		Contiki头文件：contiki-2.7\contiki-2.7\core：					contiki.h
																		contiki-default-conf.h
																		contiki-lib.h
																		contiki-net.h
																		contiki-version.h
		Contiki时钟：contiki-2.7\contiki-2.7\cpu\arm\stm32f103：		clock.c
																		rtimer-arch.h
		Contiki配置文件：contiki-2.7\contiki-2.7\platform\stm32test：	contiki-conf.h
		*Contiki移植参考main：contiki-2.7\contiki-2.7\platform\stm32test：	contiki-main.c（只用作参考写自己的main.c）
			
	3.移植前需知：
		一般实时系统移植知识：第一，修改PendSV，保存上下文。第二，修改systick，提供系统时钟。
		Contiki是非抢占的操作系统，移植不存在PendSV上下文切换，只需要修改systick。
		
	4.移植过程：
		移植实现板上两灯闪烁，各占一个线程。
		
		4.1 工程创建：
			stm32cubeMX创建基本工程，PA8，PD2。
			
		4.2 文件复制： 
			工程目录下创建Contiki，提取源码文件，复制到文件夹中。
			Contiki\sys全部文件
			Contiki\contiki.h
			Contiki\contiki-default-conf.h
			Contiki\contiki-lib.h
			Contiki\contiki-net.h
			Contiki\contiki-version.h
			Contiki\sys\clock.c
			Contiki\rtimer-arch.h
			Contiki\contiki-conf.h
			
		4.3 工程包含源文件：
			工程内创建目录Contiki，添加源文件。
			Contiki\sys\autostart.c
			Contiki\sys\clock.c
			Contiki\sys\etimer.c
			Contiki\sys\process.c
			Contiki\sys\procinit.c
			Contiki\sys\timer.c
			Contiki\contiki-conf.h
			
		4.3 包含路径：
			Options for Target ---> C/C++ ---> Include Paths ---> Setup Compiler Include Paths
			..\Contiki\sys
			..\Contiki
			
		4.4 修改clock.c：
			4.4.1 修改包含头文件：	删除#include <stm32f10x_map.h>
										#include <nvic.h>
										#include <debug-uart.h>
									增加#include "stm32f1xx_hal.h"

			4.4.1 修改函数：void SysTick_handler(void)
							void clock_init()
							
					//void
					//SysTick_handler(void) __attribute__ ((interrupt));

					//void
					//SysTick_handler(void)
					//{
					//  (void)SysTick->CTRL;
					//  SCB->ICSR = SCB_ICSR_PENDSTCLR;
					//  current_clock++;
					//  if(etimer_pending() && etimer_next_expiration_time() <= current_clock) {
					//    etimer_request_poll();
					//    /* printf("%d,%d\n", clock_time(),etimer_next_expiration_time  	()); */

					//  }
					//  if (--second_countdown == 0) {
					//    current_seconds++;
					//    second_countdown = CLOCK_SECOND;
					//  }
					//}
					
					void
					SysTick_Handler(void)
					{
						current_clock++;
						if(etimer_pending()&& etimer_next_expiration_time()<= current_clock) {
							etimer_request_poll();
							// printf("%d,%d\n",clock_time(),etimer_next_expiration_time     ());
						}
						if (--second_countdown== 0) {
							current_seconds++;
							second_countdown = CLOCK_SECOND;
						}
					}



					//void
					//clock_init()
					//{
					//  NVIC_SET_SYSTICK_PRI(8);
					//  SysTick->LOAD = MCK/8/CLOCK_SECOND;
					//  SysTick->CTRL = SysTick_CTRL_ENABLE | SysTick_CTRL_TICKINT;
					//}
					
					void
					clock_init()
					{
						if (SysTick_Config(SystemCoreClock / CLOCK_SECOND))
						{
							while(1);
						}
					//    SysTick->CTRL &= ~ SysTick_CTRL_ENABLE_Msk;
					}
					
		4.5 删除原中断时钟服务函数SysTick_Handler：
			4.5.1 修改stm32f1xx_it.c：
					注释SysTick_Handler
					//void SysTick_Handler(void)
					//{
					//  /* USER CODE BEGIN SysTick_IRQn 0 */

					//  /* USER CODE END SysTick_IRQn 0 */
					//  HAL_IncTick();
					//  HAL_SYSTICK_IRQHandler();
					//  /* USER CODE BEGIN SysTick_IRQn 1 */

					//  /* USER CODE END SysTick_IRQn 1 */
					//}

			4.5.2 修改stm32f1xx_it.h:
					注释SysTick_Handler
					//void SysTick_Handler(void);
	
		4.6 编译报错修改1：
			Contiki - keil\Contiki - keil.axf: Error: L6218E: Undefined symbol procinit (referred from procinit.o).
			修改procinit.c 
			/*extern*/ const struct process *procinit[];

		4.7 修改main.c：
			4.7.1 包含Contiki相关头文件：
					#include <sys/process.h>
					#include <sys/procinit.h>
					#include <etimer.h>
					#include <sys/autostart.h>
					#include <clock.h>
					
			4.7.2 线程创建，代码编写：
			
					/*声明进程*/
					PROCESS(test1_process, "test1");
					PROCESS(test2_process, "test2");

					/*让进程自启动*/
					AUTOSTART_PROCESSES(&test1_process, &test2_process);

					/*定义进程test1_process*/
					PROCESS_THREAD(test1_process, ev, data)
					{
						PROCESS_BEGIN();

						static struct etimer et;

						while(1) 
						{
							/*延时250ms*/
							etimer_set(&et, CLOCK_SECOND/4);
							PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&et));

							HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
						}

						PROCESS_END();
					}

					/*定义进程test2_process*/
					PROCESS_THREAD(test2_process, ev, data)
					{
						PROCESS_BEGIN();

						static struct etimer et;

						while(1) 
						{
							/*延时1000ms*/
							etimer_set(&et, CLOCK_SECOND);
							PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&et));

							HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);

						}

						PROCESS_END();
					}

					int main(void)
					{
						/*硬件初始化*/
						HAL_Init();
						SystemClock_Config();
						MX_GPIO_Init();

						/*时钟初始化*/
						clock_init();

						/*进程初始化*/
						process_init();
						process_start(&etimer_process, NULL);
						autostart_start(autostart_processes);

						while(1)
						{
							/*执行完所有needspoll为1的进程及处理完所有队列*/
							do 
							{
								
							}
							/*任务调度器*/
							while(process_run() > 0);
						}
					}
					
		4.8 编译报错修改2：
			Contiki - keil\Contiki - keil.axf: Error: L6218E: Undefined symbol autostart_processes (referred from main.o).
			修改autostart.h：
			在#if AUTOSTART_ENABLE 之前添加：
				#define AUTOSTART_ENABLE 1

		4.9 编译下载测试，移植结束。
















