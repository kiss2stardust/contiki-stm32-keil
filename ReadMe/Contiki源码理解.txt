									Contiki源码理解


一、Contiki基本模型：
	/*线程定义*/ 
	PROCESS(test1_process, "test1");
	PROCESS(test2_process, "test2");
	/*线程自启动绑定*/ 
	AUTOSTART_PROCESSES(&test1_process, &test2_process);
	/*线程test1_process实现*/
	PROCESS_THREAD(test1_process, ev, data)
	{
		PROCESS_BEGIN();										/*protothread机制所有线程以PROCESS_BEGIN()开始			*/

		static struct etimer timer;
		etimer_set(&timer, CLOCK_SECOND/4);						/*设置延时250ms											*/

		while(1) 
		{
			PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&timer));	/*等到时钟事件超时										*/
			etimer_reset(&timer);
			
			/* test1_process 任务处理代码*/
		}

		PROCESS_END();											/*protothread机制所有线程以PROCESS_END()结束			*/
	}

	/*线程test2_process实现*/
	PROCESS_THREAD(test2_process, ev, data)
	{
		PROCESS_BEGIN();										/*protothread机制所有线程以PROCESS_BEGIN()开始			*/

		static struct etimer timer;
		etimer_set(&timer, CLOCK_SECOND);						/*设置延时1000ms										*/

		while(1) 
		{
			PROCESS_WAIT_EVENT_UNTIL(ev == PROCESS_EVENT_TIMER);/*等到时钟事件超时，第二种写法							*/
			etimer_reset(&timer);

			/* test2_process 任务处理代码*/

		}

		PROCESS_END();											/*protothread机制所有线程以PROCESS_END()结束			*/
	}

	/*main*/
	int main(void)
	{
		HAL_Init();												/*HAL库初始化											*/
		SystemClock_Config();									/*stm32系统时钟初始化									*/
		MX_GPIO_Init();											/*硬件初始化											*/

		clock_init();											/*Contiki时钟初始化										*/
		process_init();											/*Contiki线程初始化										*/
		process_start(&etimer_process, NULL);					/*etimer线程启动										*/
		autostart_start(autostart_processes);					/*用户自启动线程启动									*/

		while(1)
		{
			do 
			{
				/*执行完所有needspoll为1的进程及处理完所有队列*/
			}
			while(process_run() > 0);							/*任务调度器轮询执行线程								*/
		}
	}
	
二、常规宏展开
	/*线程test2_process实现*/
	PROCESS_THREAD(test2_process, ev, data)
	{
		PROCESS_BEGIN();										/*protothread机制所有线程以PROCESS_BEGIN()开始			*/

		static struct etimer timer;
		etimer_set(&timer, CLOCK_SECOND);						/*设置延时1000ms										*/

		while(1) 
		{
			PROCESS_WAIT_EVENT_UNTIL(ev == PROCESS_EVENT_TIMER);/*等到时钟事件超时，第二种写法							*/
			etimer_reset(&timer);

			/* test2_process 任务处理代码*/

		}

		PROCESS_END();											/*protothread机制所有线程以PROCESS_END()结束			*/
	}

	宏展开分析：
	static char process_thread_test2_process(struct pt *process_pt, process_event_t ev, process_data_t data);
	struct process test2_process = { ((void *)0), "test1", process_thread_test2_process};
	struct process * const autostart_processes[] = {&test2_process, ((void *)0)};
	char process_thread_test2_process(struct pt *process_pt, process_event_t ev, process_data_t data) 
	{ 
		{ 
			char PT_YIELD_FLAG = 1;
			switch((process_pt)->lc)							/*根据行号跳转到case __LINE__:							*/
			{ 
				case 0:
					static struct etimer timer;
					etimer_set(&timer, CLOCK_SECOND);			/*设置延时1000ms										*/
					while(1) 
					{
						do
						{
							PT_YIELD_FLAG = 0;
							(process_pt)->lc = __LINE__;case __LINE__:	/*保存当前行号，设置断点case					*/
							if((PT_YIELD_FLAG == 0) || !(ev == PROCESS_EVENT_TIMER))
							{
								return PT_YIELDED;				/*条件不满足，跳出结束这个线程							*/
							}
						} while(0)

						/* test2_process 任务处理代码*/
					}
			}; 
		 }
		 PT_YIELD_FLAG = 0;
		 (process_pt)->lc = 0;									/*运行结束，清零行号，从case 0开始						*/			
		 return PT_ENDED; 
	}

三、任务控制块
	struct process
	{
		struct process *next;									/*指向下一个任务										*/	
		const char *name;										/*用户设置的任务名字*/
		PT_THREAD((* thread)(struct pt *, process_event_t, process_data_t));	/*用户设置的任务函数					*/
		struct pt pt;											/*行号													*/
		unsigned char state, needspoll;							/*state任务运行状态，needspoll就绪标志					*/
	};
	
	结构体pt进一步展开：
	struct pt
	{
		lc_t lc;
	};
	typedef unsigned short lc_t;								/*pt最后展开是lc_t，行号是short型，16位，最大行号65535	*/
	
	任务状态：
	1.运行状态：
		1.1 PROCESS_STATE_NONE			类似于Linux系统的僵尸状态，任务已退出，只是还没从任务链表删除 
		1.2 PROCESS_STATE_RUNNING		任务正在执行
		1.3 PROCESS_STATE_CALLED		实际上是返回，并保存lc值

	2.返回状态：
		2.1 PT_WAITING		调用 PROCESS_WAIT_UNTIL(c) 或者 PROCESS_WAIT_WHILE(c)，任务切换返回
		2.2 PT_YIELDED		调用 PROCESS_YIELD() 或者 PROCESS_YIELD_UNTIL(c)，任务切换返回
		2.3 PT_EXITED		调用 PT_EXIT() 返回
		2.4 PT_ENDED		调用 PT_END() 返回
	
	
四、事件控制块
	struct event_data
	{
		process_event_t ev;										/*记录事件编号，系统事件，0x80-0x8a，用户可定义还有0xff-0x8a = 117个*/
		process_data_t data;									/*事件数据指针，传递数据								*/
		struct process *p;										/*指向等待该事件的任务控制块							*/
	};
	
	进一步展开：
	typedef unsigned char process_event_t;						/*ev最后展开是char型，最大0xff							*/
	typedef void *        process_data_t;
	
	系统定义了10个事件，源码和注释如下：
	
	PROCESS_CONF_NUMEVENTS 			32							/*配置系统最大事件数									*/

	PROCESS_EVENT_NONE				0x80						/*函数dhcpc_request调用handle_dhcp(PROCESS_EVENT_NONE,NULL)*/
	PROCESS_EVENT_INIT				0x81						/*启动一个进程process_start，通过传递该事件				*/
	PROCESS_EVENT_POLL				0x82						/*在PROCESS_THREAD(etimer_process, ev, data)使用到		*/
	PROCESS_EVENT_EXIT				0x83						/*进程退出，传递该事件给进程主体函数thread				*/
	PROCESS_EVENT_SERVICE_REMOVED	0x84
	PROCESS_EVENT_CONTINUE			0x85						/*PROCESS_PAUSE宏用到这个事件							*/
	PROCESS_EVENT_MSG				0x86
	PROCESS_EVENT_EXITED			0x87						/*进程退出，传递该事件给其他进程						*/
	PROCESS_EVENT_TIMER				0x88						/*etimer到期时，传递该事件								*/
	PROCESS_EVENT_COM				0x89
	PROCESS_EVENT_MAX				0x8a						/*进程初始化时，让lastevent=PROCESS_EVENT_MAX，即新产生的事件从0x8b开始，函数process_alloc_event用于分配一个新的事件*/
	
	用户申请新的事件，从0x8b开始，最大到0xff，受限制于PROCESS_CONF_NUMEVENTS，系统默认32个，使用的时候注意修改。
	
五、时间控制块
	struct etimer
	{
		struct timer timer;										/*记录定时信息											*/
		struct etimer *next;									/*指向下一个时间控制块									*/
		struct process *p;										/*指向等待时间的任务控制块								*/
	};
	
	结构体timer进一步展开：
	struct timer
	{
		clock_time_t start;										/*定时起始时间											*/
		clock_time_t interval;									/*定时间隔时间											*/
	};
	typedef unsigned int clock_time_t;							/*设置时间值最大0xffffffff								*/
	
	timer仅包含起始时刻和间隔时间，所以timer只记录到期时间。通过比较到到期时间和新的当前时钟，从而判断该定时器是不是到期。
	
六、Contiki应用编程接口API
	1.任务
	1.1 任务声明和定义
		PROCESS_THREAD(name, ev, data)					定义任务函数
		PROCESS_NAME(name)								声明任务函数名字 
		PROCESS(name, strname)							声明任务函数

	1.2 process protothread方法
		PROCESS_BEGIN()									任务开始 
		PROCESS_END()									任务结束
		PROCESS_EXIT()									退出任务（退出后，该任务重新开始？）
		PROCESS_CURRENT()								获取指向当前正在运行的任务结构体指针（任务控制块？）
		PROCESS_CONTEXT_BEGIN(p)						将上下文切换到另一个任务（下一个？）
		PROCESS_CONTEXT_END(p)							结束上下文切换（上一个？）
		PROCESS_POLLHANDLER(handler)					在轮询任务时指定一个操作（必须在PROCESS_BEGIN()之前）
		PROCESS_EXITHANDLER(handler)					指定任务退出时的操作（必须在PROCESS_BEGIN()之前）

	1.3 任务内核函数
		void process_start (struct process *p, const char *arg)			开始任务 
		void process_exit (struct process *p)							退出任务

	1.4 挂起任务相关
		PROCESS_WAIT_EVENT()							放弃本轮MCU资源，切换下一个任务（实际上是PROCESS_YIELD()）
		PROCESS_WAIT_EVENT_UNTIL(c)						等待c条件成立，成立，往下执行，不成立，切换下一个任务 （实际上是PROCESS_YIELD_UNTIL(c)）
		PROCESS_YIELD()									放弃本轮MCU资源，切换下一个任务
		PROCESS_YIELD_UNTIL(c)							等待c条件成立，成立，往下执行，不成立，切换下一个任务 
		PROCESS_WAIT_UNTIL(c)							等待c条件成立，成立，往下执行，不成立，切换下一个任务  
		PROCESS_WAIT_WHILE(c)							等待c条件成立，不成立，往下执行，成立，切换下一个任务 
		PROCESS_PT_SPAWN(pt, thread)					产生一个协程并等待它结束？
		PROCESS_PAUSE()									短暂停留，切换下一个任务？

	2.事件
		2.1 新建事件
		process_event_t  process_alloc_event (void)		注册一个事件，从0x8a叠加，用户注册最多 PROCESS_CONF_NUMEVENTS 32 个事件

		2.2 传递事件
		int process_post (struct process *p, process_event_t ev, void *data)			发送一个异步事件
		void process_post_synch (struct process *p, process_event_t ev, void *data)		发送一个同步事件

	3.时间
		void etimer_set (struct etimer *et, clock_time_t interval)		配置一个时钟事件
		void etimer_reset (struct etimer *et)							复位时钟事件
		void etimer_restart (struct etimer *et)							清零时钟计数
		void etimer_adjust (struct etimer *et, int td)					调整事件
		void etimer_stop (struct etimer *et)							停止时钟
		int etimer_expired (struct etimer *et)							检查到否到期
		clock_time_t etimer_expiration_time (struct etimer *et)			获取计数器到期时间
		clock_time_t etimer_start_time (struct etimer *et)				获取计数器开始时间













